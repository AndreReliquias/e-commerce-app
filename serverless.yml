service: e-commerce-app

frameworkVersion: '2 || 3'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-east-1
  stage: ${opt:stage, 'prod'}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:*:*:table/*"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  excludeDevDependencies: true
  exclude:
    - .git/**
    - .test/**
    - .github/**

functions:
  notFound:
    handler: src/shared/notFound.notFound
    timeout: 30
    events:
      - http:
          path: ${self:custom.version}/{proxy+}
          method: any
          cors: true

  createOrders:
    handler: src/api/${self:custom.version}/orders/create.create
    timeout: 30
    events:
      - http:
          path: ${self:custom.version}/orders
          method: post
          cors: true

  readOrders:
    handler: src/api/${self:custom.version}/orders/read.read
    timeout: 30
    events:
      - http:
          path: ${self:custom.version}/orders
          method: get
          cors: true

  readOrdersById:
    handler: src/api/${self:custom.version}/orders/read.readById
    timeout: 30
    events:
      - http:
          path: ${self:custom.version}/orders/{id}
          method: get
          cors: true

  updateOrders:
    handler: src/api/${self:custom.version}/orders/update.update
    timeout: 30
    events:
      - http:
          path: ${self:custom.version}/orders/{id}
          method: put
          cors: true

  deleteOrders:
    handler: src/api/${self:custom.version}/orders/delete.delete
    timeout: 30
    events:
      - http:
          path: ${self:custom.version}/orders/{id}
          method: delete
          cors: true

resources:
 Resources:
    ordersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ordersTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  serverless-offline:
    host: '0.0.0.0'

  dynamodb:
    stages:
      - local
      - dev
      - prod
    start:
      host: dynamo
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
      noStart: true

  version: ${opt:version, 'v1'}
